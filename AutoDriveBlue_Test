package org.firstinspires.ftc.teamcode.Season17and18;

import android.app.Activity;
import android.graphics.Color;
import android.view.View;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.LightSensor;
import com.qualcomm.robotcore.hardware.OpticalDistanceSensor;
import com.sun.tools.javac.jvm.Target;


@Autonomous(name="AutoDriveBlue", group="Autonomous")

public class AutoDriveBlue extends LinearOpMode {
    double i = 0;
    private static final double servoPos2 = 0.85;
    private static final double servoPos1 = 0.3;
    private static final double STRAFE_POWER = 0.7;
    HardwareMapping robot = new HardwareMapping();
    ColorSensor colorSensor;


    public void runOpMode() throws InterruptedException {
        robot.init(hardwareMap);
        robot.LeftBalance.setPosition(servoPos1);
        robot.RightBalance.setPosition(1 - servoPos1);
        robot.GlyphLift.setTargetPosition(0);
        robot.leftPaddle.setPosition(0.5);
        robot.rightPaddle.setPosition(0.5);
        showTelemetry();
        waitForStart();
        sleep(50);
        robot.gemServo.setPosition(0.5);
        sleep(100);
        ColorSense();
        robot.RightBalance.setPosition(0.7);
        robot.LeftBalance.setPosition(0.3);
    }

    void ColorSense() {
        while (i < 500) {
            showTelemetry();

            float hsvValues[] = {0F, 0F, 0F};

            final float values[] = hsvValues;

            int relativeLayoutId = hardwareMap.appContext.getResources().getIdentifier("RelativeLayout", "id", hardwareMap.appContext.getPackageName());
            final View relativeLayout = ((Activity) hardwareMap.appContext).findViewById(relativeLayoutId);

            colorSensor = hardwareMap.get(ColorSensor.class, "colorSensor");


            Color.RGBToHSV(colorSensor.red() * 8, colorSensor.green() * 8, colorSensor.blue() * 8, hsvValues);
            telemetry.addData("Clear", colorSensor.alpha());
            telemetry.addData("Red  ", colorSensor.red());
            telemetry.addData("Green", colorSensor.green());
            telemetry.addData("Blue ", colorSensor.blue());
            telemetry.addData("Hue", hsvValues[0]);

            showTelemetry();

            relativeLayout.post(new Runnable() {
                public void run() {
                    relativeLayout.setBackgroundColor(Color.HSVToColor(0xff, values));
                }
            });

            telemetry.update();
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            i = i + 1;
            if (colorSensor.blue() >= 1) {
                telemetry.addData("BLUE BLUE BLUE", colorSensor.blue());
                //move the opposite way the sensor is facing
                DriveStraight(0.2, -10);
                telemetry.update();
                i = 500;
            } else if (colorSensor.red() >= 1) {
                telemetry.addData("RED RED RED", colorSensor.red());
                //move the way the sensor is facing
                DriveStraight(0.2, 10);
                telemetry.update();
                i = 500;
            }
        }
    }

    void DriveStraight (double power, int position) {

        ResetEncoders();

        TargetPosition(0, position);

        RunToPosition();

        Power(power);

        EncoderCheck();

        ResetEncoders();

        showTelemetry();
    }

    /*void DriveStraight (double power, int position) {
        robot.FrontRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.FrontRight.setTargetPosition(position);
        if (robot.FrontRight.getCurrentPosition() > position) {
            robot.FrontRight.setPower(-power);
        }
        else if (robot.FrontRight.getCurrentPosition() < position){
            robot.FrontRight.setPower(power);
        }

        robot.FrontLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.FrontLeft.setTargetPosition(position);
        if (robot.FrontLeft.getCurrentPosition() > position) {
            robot.FrontLeft.setPower(-power);
        }
        else if (robot.FrontLeft.getCurrentPosition() < position){
            robot.FrontLeft.setPower(power);
        }

        robot.RearRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.RearRight.setTargetPosition(position);
        if (robot.RearRight.getCurrentPosition() > position) {
            robot.RearRight.setPower(-power);
        }
        else if (robot.RearRight.getCurrentPosition() < position){
            robot.RearRight.setPower(power);
        }

        robot.RearLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.RearLeft.setTargetPosition(position);
        if (robot.RearLeft.getCurrentPosition() > position) {
            robot.RearLeft.setPower(-power);
        }
        else if (robot.RearLeft.getCurrentPosition() < position){
            robot.RearLeft.setPower(power);
        }
        telemetry.addData("Front Right Encoder Position", robot.FrontRight.getCurrentPosition());
        telemetry.addData("Rear Right Encoder Position", robot.RearRight.getCurrentPosition());
        telemetry.addData("Front Left Encoder Position", robot.FrontLeft.getCurrentPosition());
        telemetry.addData("Rear Left Encoder Position", robot.RearLeft.getCurrentPosition());
        telemetry.update();

    }

    void TurnRight (double power, int position){
        robot.FrontRight.setTargetPosition(-position);
        if (robot.FrontRight.getCurrentPosition() > -position - 2) {
            robot.FrontRight.setPower(-power);
        }
        else if (robot.FrontRight.getCurrentPosition() < -position + 2){
            robot.FrontRight.setPower(power);
        }

        robot.FrontLeft.setTargetPosition(position);
        if (robot.FrontLeft.getCurrentPosition() > position - 2) {
            robot.FrontLeft.setPower(-power);
        }
        else if (robot.FrontLeft.getCurrentPosition() < position + 2){
            robot.FrontLeft.setPower(power);
        }

        robot.RearRight.setTargetPosition(-position);
        if (robot.RearRight.getCurrentPosition() > -position - 2) {
            robot.RearRight.setPower(-power);
        }
        else if (robot.RearRight.getCurrentPosition() < -position + 2){
            robot.RearRight.setPower(power);
        }

        robot.RearLeft.setTargetPosition(position);
        if (robot.RearLeft.getCurrentPosition() > position - 2) {
            robot.RearLeft.setPower(-power);
        }
        else if (robot.RearLeft.getCurrentPosition() < position + 2) {
            robot.RearLeft.setPower(power);
        }
        telemetry.addData("Front Right Encoder Position", robot.FrontRight.getCurrentPosition());
        telemetry.addData("Rear Right Encoder Position", robot.RearRight.getCurrentPosition());
        telemetry.addData("Front Left Encoder Position", robot.FrontLeft.getCurrentPosition());
        telemetry.addData("Rear Left Encoder Position", robot.RearLeft.getCurrentPosition());
        telemetry.update();
    }

    void TurnLeft (double power, int position){
        robot.FrontRight.setTargetPosition(position);
        if (robot.FrontRight.getCurrentPosition() > position - 2) {
            robot.FrontRight.setPower(-power);
        }
        else if (robot.FrontRight.getCurrentPosition() < position + 2){
            robot.FrontRight.setPower(power);
        }

        robot.FrontLeft.setTargetPosition(-position);
        if (robot.FrontLeft.getCurrentPosition() > -position - 2) {
            robot.FrontLeft.setPower(-power);
        }
        else if (robot.FrontLeft.getCurrentPosition() < -position + 2){
            robot.FrontLeft.setPower(power);
        }

        robot.RearRight.setTargetPosition(position);
        if (robot.RearRight.getCurrentPosition() > position - 2) {
            robot.RearRight.setPower(-power);
        }
        else if (robot.RearRight.getCurrentPosition() < position + 2){
            robot.RearRight.setPower(power);
        }

        robot.RearLeft.setTargetPosition(-position);
        if (robot.RearLeft.getCurrentPosition() > -position - 2) {
            robot.RearLeft.setPower(-power);
        }
        else if (robot.RearLeft.getCurrentPosition() < -position + 2) {
            robot.RearLeft.setPower(power);
        }
        telemetry.addData("Front Right Encoder Position", robot.FrontRight.getCurrentPosition());
        telemetry.addData("Rear Right Encoder Position", robot.RearRight.getCurrentPosition());
        telemetry.addData("Front Left Encoder Position", robot.FrontLeft.getCurrentPosition());
        telemetry.addData("Rear Left Encoder Position", robot.RearLeft.getCurrentPosition());
        telemetry.update();
    }

    void StrafeRight (int position){
        robot.FrontRight.setTargetPosition(-position);
        if (robot.FrontRight.getCurrentPosition() > -position - 2) {
            robot.FrontRight.setPower(-0.7);
        }
        else if (robot.FrontRight.getCurrentPosition() < -position + 2){
            robot.FrontRight.setPower(0.7);
        }

        robot.FrontLeft.setTargetPosition(position);
        if (robot.FrontLeft.getCurrentPosition() > position - 2) {
            robot.FrontLeft.setPower(-0.7);
        }
        else if (robot.FrontLeft.getCurrentPosition() < position + 2){
            robot.FrontLeft.setPower(0.7);
        }

        robot.RearRight.setTargetPosition(position);
        if (robot.RearRight.getCurrentPosition() > position - 2) {
            robot.RearRight.setPower(-0.7);
        }
        else if (robot.RearRight.getCurrentPosition() < position + 2){
            robot.RearRight.setPower(0.7);
        }

        robot.RearLeft.setTargetPosition(-position);
        if (robot.RearLeft.getCurrentPosition() > -position - 2) {
            robot.RearLeft.setPower(-0.7);
        }
        else if (robot.RearLeft.getCurrentPosition() < -position + 2) {
            robot.RearLeft.setPower(0.7);
        }
        telemetry.addData("Front Right Encoder Position", robot.FrontRight.getCurrentPosition());
        telemetry.addData("Rear Right Encoder Position", robot.RearRight.getCurrentPosition());
        telemetry.addData("Front Left Encoder Position", robot.FrontLeft.getCurrentPosition());
        telemetry.addData("Rear Left Encoder Position", robot.RearLeft.getCurrentPosition());
        telemetry.update();
    }

    void StrafeLeft (int position){
        robot.FrontRight.setTargetPosition(position);
        if (robot.FrontRight.getCurrentPosition() > position - 2) {
            robot.FrontRight.setPower(-0.7);
        }
        else if (robot.FrontRight.getCurrentPosition() < position + 2){
            robot.FrontRight.setPower(0.7);
        }

        robot.FrontLeft.setTargetPosition(-position);
        if (robot.FrontLeft.getCurrentPosition() > -position - 2) {
            robot.FrontLeft.setPower(-0.7);
        }
        else if (robot.FrontLeft.getCurrentPosition() < -position + 2){
            robot.FrontLeft.setPower(0.7);
        }

        robot.RearRight.setTargetPosition(-position);
        if (robot.RearRight.getCurrentPosition() > -position - 2) {
            robot.RearRight.setPower(-0.7);
        }
        else if (robot.RearRight.getCurrentPosition() < -position + 2){
            robot.RearRight.setPower(0.7);
        }

        robot.RearLeft.setTargetPosition(position);
        if (robot.RearLeft.getCurrentPosition() > position - 2) {
            robot.RearLeft.setPower(-0.7);
        }
        else if (robot.RearLeft.getCurrentPosition() < position + 2) {
            robot.RearLeft.setPower(0.7);
        }
        telemetry.addData("Front Right Encoder Position", robot.FrontRight.getCurrentPosition());
        telemetry.addData("Rear Right Encoder Position", robot.RearRight.getCurrentPosition());
        telemetry.addData("Front Left Encoder Position", robot.FrontLeft.getCurrentPosition());
        telemetry.addData("Rear Left Encoder Position", robot.RearLeft.getCurrentPosition());
        telemetry.update();
    }*/

    void ClawGrab () {
        robot.rightPaddle.setPosition(0.5);
        robot.leftPaddle.setPosition(0.64);
    }

    void ClawRelease () {
        robot.rightPaddle.setPosition(0.7);
        robot.leftPaddle.setPosition(0.44);
    }


    void EncoderCheck () {
        while (robot.FrontRight.isBusy() && robot.FrontLeft.isBusy() && robot.RearRight.isBusy() && robot.RearLeft.isBusy()) {
        }
    }

    void RunToPosition () {
        robot.FrontLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        robot.FrontRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        robot.RearLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        robot.RearRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        robot.GlyphLift.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    }

    void ResetEncoders () {
        robot.FrontRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.FrontLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.RearRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.RearLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    }

    //Key: 8 = FrontRight and RearLeft, 9 = FrontRight and RearRight, 10 = FrontLeft and RearLeft,
    //11-14 = Combinations of 3 negatives that we probably won't use
    // >= 9000 = All negative
    void TargetPosition (int num, int position) {
        if (num == 0) {
            robot.FrontRight.setTargetPosition(position);
            robot.FrontLeft.setTargetPosition(position);
            robot.RearRight.setTargetPosition(position);
            robot.RearLeft.setTargetPosition(position);
        } else if (num == 1) {
            robot.FrontRight.setTargetPosition(-position);
            robot.FrontLeft.setTargetPosition(position);
            robot.RearRight.setTargetPosition(position);
            robot.RearLeft.setTargetPosition(position);
        } else if (num == 2) {
            robot.FrontRight.setTargetPosition(position);
            robot.FrontLeft.setTargetPosition(-position);
            robot.RearRight.setTargetPosition(position);
            robot.RearLeft.setTargetPosition(position);
        } else if (num == 3) {
            robot.FrontRight.setTargetPosition(position);
            robot.FrontLeft.setTargetPosition(position);
            robot.RearRight.setTargetPosition(-position);
            robot.RearLeft.setTargetPosition(position);
        } else if (num == 4) {
            robot.FrontRight.setTargetPosition(position);
            robot.FrontLeft.setTargetPosition(position);
            robot.RearRight.setTargetPosition(position);
            robot.RearLeft.setTargetPosition(-position);
        } else if (num == 5) {
            robot.FrontRight.setTargetPosition(-position);
            robot.FrontLeft.setTargetPosition(-position);
            robot.RearRight.setTargetPosition(position);
            robot.RearLeft.setTargetPosition(position);
        } else if (num == 6) {
            robot.FrontRight.setTargetPosition(position);
            robot.FrontLeft.setTargetPosition(-position);
            robot.RearRight.setTargetPosition(-position);
            robot.RearLeft.setTargetPosition(position);
        } else if (num == 7) {
            robot.FrontRight.setTargetPosition(position);
            robot.FrontLeft.setTargetPosition(position);
            robot.RearRight.setTargetPosition(-position);
            robot.RearLeft.setTargetPosition(-position);
        } else if (num == 8) {
            robot.FrontRight.setTargetPosition(-position);
            robot.FrontLeft.setTargetPosition(position);
            robot.RearRight.setTargetPosition(position);
            robot.RearLeft.setTargetPosition(-position);
        } else if (num == 9) {
            robot.FrontRight.setTargetPosition(-position);
            robot.FrontLeft.setTargetPosition(position);
            robot.RearRight.setTargetPosition(-position);
            robot.RearLeft.setTargetPosition(position);
        } else if (num == 10) {
            robot.FrontRight.setTargetPosition(position);
            robot.FrontLeft.setTargetPosition(-position);
            robot.RearRight.setTargetPosition(position);
            robot.RearLeft.setTargetPosition(-position);
        } else if (num == 11) {
            robot.FrontRight.setTargetPosition(-position);
            robot.FrontLeft.setTargetPosition(-position);
            robot.RearRight.setTargetPosition(-position);
            robot.RearLeft.setTargetPosition(position);
        } else if (num == 12) {
            robot.FrontRight.setTargetPosition(position);
            robot.FrontLeft.setTargetPosition(-position);
            robot.RearRight.setTargetPosition(-position);
            robot.RearLeft.setTargetPosition(-position);
        } else if (num == 13) {
            robot.FrontRight.setTargetPosition(-position);
            robot.FrontLeft.setTargetPosition(-position);
            robot.RearRight.setTargetPosition(position);
            robot.RearLeft.setTargetPosition(-position);
        } else if (num == 14) {
            robot.FrontRight.setTargetPosition(-position);
            robot.FrontLeft.setTargetPosition(position);
            robot.RearRight.setTargetPosition(-position);
            robot.RearLeft.setTargetPosition(-position);
        } else if (num >= 9000) {
            robot.FrontRight.setTargetPosition(-position);
            robot.FrontLeft.setTargetPosition(-position);
            robot.RearRight.setTargetPosition(-position);
            robot.RearLeft.setTargetPosition(-position);
        }

    }

    void Power (double power) {
        robot.FrontRight.setPower(power);
        robot.FrontLeft.setPower(power);
        robot.RearRight.setPower(power);
        robot.RearLeft.setPower(power);
    }

    void showTelemetry (){
        telemetry.addData("Front Right Encoder Position", robot.FrontRight.getCurrentPosition());
        telemetry.addData("Rear Right Encoder Position", robot.RearRight.getCurrentPosition());
        telemetry.addData("Front Left Encoder Position", robot.FrontLeft.getCurrentPosition());
        telemetry.addData("Rear Left Encoder Position", robot.RearLeft.getCurrentPosition());
        telemetry.update();
    }

}
