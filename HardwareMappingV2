package org.firstinspires.ftc.teamcode.Season17and18;

import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.TouchSensor;

//This is NOT an OpMode

public class HardwareMapping
{
   /* Public OpMode members. */
   public DcMotor  FrontLeft   = null;
   public DcMotor  FrontRight  = null;
   public DcMotor  RearLeft  = null;
   public DcMotor  RearRight  = null;

   //public Servo grab = null;
   //public Servo lightSwitch = null;

   /* local OpMode members. */
   HardwareMap hwMap           =  null;
   private ElapsedTime period  = new ElapsedTime();

   /* Constructor */
   public HardwareMapping(){

   }

   /* Initialize standard Hardware interfaces */
   public void init(HardwareMap ahwMap) {
       // Save reference to Hardware map
       hwMap = ahwMap;

       // Define and Initialize Motors
       FrontLeft   = hwMap.dcMotor.get("FrontLeft");
       //rightMotor.setDirection(DcMotor.Direction.FORWARD);
       FrontRight  = hwMap.dcMotor.get("FrontRight");
       RearLeft = hwMap.dcMotor.get("RearLeft");
       RearRight = hwMap.dcMotor.get("RearRight");
       //RearRight.setDirection(DcMotor.Direction.FORWARD);


       //Initialize Sensors

       //Initialize Servos
       //grab = hwMap.servo.get("grab");
       //lightSwitch = hwMap.servo.get("light_switch");

       // Set all motors to zero power
       FrontLeft.setPower(0);
       FrontRight.setPower(0);
       RearLeft.setPower(0);
       RearRight.setPower(0);

       //Set Servo "Grab" Position
       //grab.setPosition(10);

       // Set all motors to run without encoders.
       // May want to use RUN_USING_ENCODERS if encoders are installed.
       FrontLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
       FrontRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
       RearLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
       RearRight.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

   }

   /***
    *
    * waitForTick implements a periodic delay. However, this acts like a metronome with a regular
    * periodic tick.  This is used to compensate for varying processing times for each cycle.
    * The function looks at the elapsed cycle time, and sleeps for the remaining time interval.
    *
    * @param periodMs  Length of wait cycle in mSec.
    */
   public void waitForTick(long periodMs) {

       long  remaining = periodMs - (long)period.milliseconds();

       // sleep for the remaining portion of the regular cycle period.
       if (remaining > 0) {
           try {
               Thread.sleep(remaining);
           } catch (InterruptedException e) {
               Thread.currentThread().interrupt();
           }
       }

       // Reset the cycle clock for the next pass.
       period.reset();
   }
}
