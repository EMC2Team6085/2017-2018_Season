package org.firstinspires.ftc.teamcode.Season16and17;

import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.TouchSensor;

//This is NOT an OpMode

public class HardwareMappingTEST
{
    /* Public OpMode members. */
    public DcMotor  leftMotor   = null;
    public DcMotor  rightMotor  = null;
    public DcMotor  linearslides  = null;
    public DcMotor  spinnerRight  = null;
    public DcMotor  spinnerLeft  = null;
    public DcMotor  verticalBelt  = null;
    public DcMotor  frontFlipper  = null;

    //public TouchSensor touchSensor = null;
    //public ColorSensor colorSensor  = null;

    public Servo grabRight = null;
    public Servo grabLeft = null;


    //public static final double MID_SERVO       =  0.5 ;
    //public static final double ARM_UP_POWER    =  0.45 ;
    //public static final double ARM_DOWN_POWER  = -0.45 ;

    /* local OpMode members. */
    HardwareMap hwMap           =  null;
    private ElapsedTime period  = new ElapsedTime();

    /* Constructor */
    public HardwareMappingTEST(){

    }

    /* Initialize standard Hardware interfaces */
    public void init(HardwareMap ahwMap) {
        // Save reference to Hardware map
        hwMap = ahwMap;

        // Define and Initialize Motors
        leftMotor   = hwMap.dcMotor.get("left_drive");
        rightMotor  = hwMap.dcMotor.get("right_drive");
        linearslides = hwMap.dcMotor.get("linear_slides");
        spinnerLeft = hwMap.dcMotor.get("left_spinner");
        spinnerLeft.setDirection(DcMotor.Direction.REVERSE);
        spinnerRight = hwMap.dcMotor.get("right_spinner");
        verticalBelt = hwMap.dcMotor.get("vertical_belt");
        frontFlipper = hwMap.dcMotor.get("front_flipper");

        //Initialize Sensors
        //touchSensor = hwMap.touchSensor.get("sensor_touch");
        //colorSensor = hwMap.colorSensor.get("sensor_color");

        //Initialize Servos
        //grabLeft = hwMap.servo.get("left_grab");
        //grabRight = hwMap.servo.get("right_grab");

        // Set all motors to zero power
        leftMotor.setPower(0);
        rightMotor.setPower(0);
        linearslides.setPower(0);
        spinnerLeft.setPower(0);
        spinnerRight.setPower(0);
        verticalBelt.setPower(0);
        frontFlipper.setPower(0);

        // Set all motors to run without encoders.
        // May want to use RUN_USING_ENCODERS if encoders are installed.
        leftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        linearslides.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        spinnerLeft.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        spinnerRight.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        verticalBelt.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        frontFlipper.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

    }

    /***
     *
     * waitForTick implements a periodic delay. However, this acts like a metronome with a regular
     * periodic tick.  This is used to compensate for varying processing times for each cycle.
     * The function looks at the elapsed cycle time, and sleeps for the remaining time interval.
     *
     * @param periodMs  Length of wait cycle in mSec.
     */
    public void waitForTick(long periodMs) {

        long  remaining = periodMs - (long)period.milliseconds();

        // sleep for the remaining portion of the regular cycle period.
        if (remaining > 0) {
            try {
                Thread.sleep(remaining);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }

        // Reset the cycle clock for the next pass.
        period.reset();
    }
}
