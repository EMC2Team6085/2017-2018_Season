package org.firstinspires.ftc.teamcode.Season17and18;

import android.app.Activity;
import android.graphics.Color;
import android.view.View;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;

@Autonomous(name="AutoDriveBlue", group="Autonomous")

public class AutoDriveBlue extends LinearOpMode {
    double i = 0;
    private static final double servoPos2 = 0.85;
    private static final double servoPos1 = 0.3;
    private static final double STRAFE_POWER = 0.7;
    HardwareMapping robot = new HardwareMapping();
    ColorSensor colorSensor;

    public void runOpMode() throws InterruptedException{
        robot.gemServo.setPosition(1);
        robot.init(hardwareMap);
        robot.LeftBalance.setPosition(servoPos1);
        robot.RightBalance.setPosition(1 - servoPos1);
        robot.GlyphLift.setTargetPosition(0);
        robot.leftPaddle.setPosition(0.5);
        robot.rightPaddle.setPosition(0.5);
        showTelemetry();
        waitForStart();
        robot.gemServo.setPosition(0.3);
        sleep(2000);
        while (i < 50) {
            showTelemetry();

            float hsvValues[] = {0F, 0F, 0F};

            final float values[] = hsvValues;

            int relativeLayoutId = hardwareMap.appContext.getResources().getIdentifier("RelativeLayout", "id", hardwareMap.appContext.getPackageName());
            final View relativeLayout = ((Activity) hardwareMap.appContext).findViewById(relativeLayoutId);

            colorSensor = hardwareMap.get(ColorSensor.class, "colorSensor");


            Color.RGBToHSV(colorSensor.red() * 8, colorSensor.green() * 8, colorSensor.blue() * 8, hsvValues);
            telemetry.addData("Clear", colorSensor.alpha());
            telemetry.addData("Red  ", colorSensor.red());
            telemetry.addData("Green", colorSensor.green());
            telemetry.addData("Blue ", colorSensor.blue());
            telemetry.addData("Hue", hsvValues[0]);

            showTelemetry();

            relativeLayout.post(new Runnable() {
                    public void run() {
                        relativeLayout.setBackgroundColor(Color.HSVToColor(0xff, values));}
                });

                telemetry.update();
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            i = i + 1;
                if (colorSensor.blue() >= 2) {
                    telemetry.addData("BLUE BLUE BLUE", colorSensor.blue());
                    //move the opposite way the sensor is facing
                    telemetry.update();
                    i = 5000;
                } else if (colorSensor.red() >= 2) {
                    telemetry.addData("RED RED RED", colorSensor.red());
                    //move the way the sensor is facing
                    telemetry.update();
                    i = 5000;
                }
            }
        }

    void DriveStraight (double power){
        robot.FrontLeft.setPower(power);
        robot.RearLeft.setPower(power);
        robot.FrontRight.setPower(power);
        robot.RearRight.setPower(power);
    }

    void DriveRight (double power){
        robot.FrontLeft.setPower(power);
        robot.RearLeft.setPower(power);
        robot.FrontRight.setPower(-power);
        robot.RearRight.setPower(-power);
    }

    void DriveLeft (double power){
        robot.FrontLeft.setPower(-power);
        robot.RearLeft.setPower(-power);
        robot.FrontRight.setPower(power);
        robot.RearRight.setPower(power);
    }

    void StrafeRight (){
        robot.FrontLeft.setPower(STRAFE_POWER);
        robot.RearLeft.setPower(-STRAFE_POWER);
        robot.FrontRight.setPower(-STRAFE_POWER);
        robot.RearRight.setPower(STRAFE_POWER);
    }

    void StrafeLeft (){
        robot.FrontLeft.setPower(-STRAFE_POWER);
        robot.RearLeft.setPower(STRAFE_POWER);
        robot.FrontRight.setPower(STRAFE_POWER);
        robot.RearRight.setPower(-STRAFE_POWER);
    }

    void showTelemetry (){
        telemetry.addData("Front Right Encoder Position", robot.FrontRight.getCurrentPosition());
        telemetry.addData("Rear Right Encoder Position", robot.RearRight.getCurrentPosition());
        telemetry.addData("Front Left Encoder Position", robot.FrontLeft.getCurrentPosition());
        telemetry.addData("Rear Left Encoder Position", robot.RearLeft.getCurrentPosition());
        telemetry.update();
    }


}
