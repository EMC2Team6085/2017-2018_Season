    void DriveStraight (double power, int position) {
        robot.FrontRight.setTargetPosition(position);
        if (robot.FrontRight.getCurrentPosition() > position - 2) {
            robot.FrontRight.setPower(-power);
        }
        else if (robot.FrontRight.getCurrentPosition() < position + 2){
            robot.FrontRight.setPower(power);
        }

        robot.FrontLeft.setTargetPosition(position);
        if (robot.FrontLeft.getCurrentPosition() > position - 2) {
            robot.FrontLeft.setPower(-power);
        }
        else if (robot.FrontLeft.getCurrentPosition() < position + 2){
            robot.FrontLeft.setPower(power);
        }

        robot.RearRight.setTargetPosition(position);
        if (robot.RearRight.getCurrentPosition() > position - 2) {
            robot.RearRight.setPower(-power);
        }
        else if (robot.RearRight.getCurrentPosition() < position + 2){
            robot.RearRight.setPower(power);
        }

        robot.RearLeft.setTargetPosition(position);
        if (robot.RearLeft.getCurrentPosition() > position - 2) {
            robot.RearLeft.setPower(-power);
        }
        else if (robot.RearLeft.getCurrentPosition() < position + 2){
            robot.RearLeft.setPower(power);
        }
    }
    
    void TurnRight (double power, int position){
        robot.FrontRight.setTargetPosition(-position);
        if (robot.FrontRight.getCurrentPosition() > -position - 2) {
            robot.FrontRight.setPower(-power);
        }
        else if (robot.FrontRight.getCurrentPosition() < -position + 2){
            robot.FrontRight.setPower(power);
        }

        robot.FrontLeft.setTargetPosition(position);
        if (robot.FrontLeft.getCurrentPosition() > position - 2) {
            robot.FrontLeft.setPower(-power);
        }
        else if (robot.FrontLeft.getCurrentPosition() < position + 2){
            robot.FrontLeft.setPower(power);
        }

        robot.RearRight.setTargetPosition(-position);
        if (robot.RearRight.getCurrentPosition() > -position - 2) {
            robot.RearRight.setPower(-power);
        }
        else if (robot.RearRight.getCurrentPosition() < -position + 2){
            robot.RearRight.setPower(power);
        }

        robot.RearLeft.setTargetPosition(position);
        if (robot.RearLeft.getCurrentPosition() > position - 2) {
            robot.RearLeft.setPower(-power);
        }
        else if (robot.RearLeft.getCurrentPosition() < position + 2) {
            robot.RearLeft.setPower(power);
        }
    }

    void TurnLeft (double power, int position){
        robot.FrontRight.setTargetPosition(position);
        if (robot.FrontRight.getCurrentPosition() > position - 2) {
            robot.FrontRight.setPower(-power);
        }
        else if (robot.FrontRight.getCurrentPosition() < position + 2){
            robot.FrontRight.setPower(power);
        }

        robot.FrontLeft.setTargetPosition(-position);
        if (robot.FrontLeft.getCurrentPosition() > -position - 2) {
            robot.FrontLeft.setPower(-power);
        }
        else if (robot.FrontLeft.getCurrentPosition() < -position + 2){
            robot.FrontLeft.setPower(power);
        }

        robot.RearRight.setTargetPosition(position);
        if (robot.RearRight.getCurrentPosition() > position - 2) {
            robot.RearRight.setPower(-power);
        }
        else if (robot.RearRight.getCurrentPosition() < position + 2){
            robot.RearRight.setPower(power);
        }

        robot.RearLeft.setTargetPosition(-position);
        if (robot.RearLeft.getCurrentPosition() > -position - 2) {
            robot.RearLeft.setPower(-power);
        }
        else if (robot.RearLeft.getCurrentPosition() < -position + 2) {
            robot.RearLeft.setPower(power);
        }
    }

    void StrafeRight (int position){
        robot.FrontRight.setTargetPosition(-position);
        if (robot.FrontRight.getCurrentPosition() > -position - 2) {
            robot.FrontRight.setPower(-0.7);
        }
        else if (robot.FrontRight.getCurrentPosition() < -position + 2){
            robot.FrontRight.setPower(0.7);
        }

        robot.FrontLeft.setTargetPosition(position);
        if (robot.FrontLeft.getCurrentPosition() > position - 2) {
            robot.FrontLeft.setPower(-0.7);
        }
        else if (robot.FrontLeft.getCurrentPosition() < position + 2){
            robot.FrontLeft.setPower(0.7);
        }

        robot.RearRight.setTargetPosition(position);
        if (robot.RearRight.getCurrentPosition() > position - 2) {
            robot.RearRight.setPower(-0.7);
        }
        else if (robot.RearRight.getCurrentPosition() < position + 2){
            robot.RearRight.setPower(0.7);
        }

        robot.RearLeft.setTargetPosition(-position);
        if (robot.RearLeft.getCurrentPosition() > -position - 2) {
            robot.RearLeft.setPower(-0.7);
        }
        else if (robot.RearLeft.getCurrentPosition() < -position + 2) {
            robot.RearLeft.setPower(0.7);
        }
    }

    void StrafeLeft (int position){
        robot.FrontRight.setTargetPosition(position);
        if (robot.FrontRight.getCurrentPosition() > position - 2) {
            robot.FrontRight.setPower(-0.7);
        }
        else if (robot.FrontRight.getCurrentPosition() < position + 2){
            robot.FrontRight.setPower(0.7);
        }

        robot.FrontLeft.setTargetPosition(-position);
        if (robot.FrontLeft.getCurrentPosition() > -position - 2) {
            robot.FrontLeft.setPower(-0.7);
        }
        else if (robot.FrontLeft.getCurrentPosition() < -position + 2){
            robot.FrontLeft.setPower(0.7);
        }

        robot.RearRight.setTargetPosition(-position);
        if (robot.RearRight.getCurrentPosition() > -position - 2) {
            robot.RearRight.setPower(-0.7);
        }
        else if (robot.RearRight.getCurrentPosition() < -position + 2){
            robot.RearRight.setPower(0.7);
        }

        robot.RearLeft.setTargetPosition(position);
        if (robot.RearLeft.getCurrentPosition() > position - 2) {
            robot.RearLeft.setPower(-0.7);
        }
        else if (robot.RearLeft.getCurrentPosition() < position + 2) {
            robot.RearLeft.setPower(0.7);
        }
    }
    
    void ClawGrab () {
        robot.rightPaddle.setPosition(0.5);
        robot.leftPaddle.setPosition(0.64);
    }

    void ClawRelease () {
        robot.rightPaddle.setPosition(0.7);
        robot.leftPaddle.setPosition(0.44);
    }

SECOND HALF






            if (colorSensor.blue() >= 2) {
                telemetry.addData("BLUE BLUE BLUE", colorSensor.blue());
                //move the opposite way the sensor is facing
                **DriveStraight(0.2, -360);**
                telemetry.update();
                i = 500;
            } else if (colorSensor.red() >= 2) {
                telemetry.addData("RED RED RED", colorSensor.red());
                //move the way the sensor is facing
                **DriveStraight(0.2, 360);**
                telemetry.update();
                i = 500;
            }
