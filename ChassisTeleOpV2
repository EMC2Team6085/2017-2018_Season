package org.firstinspires.ftc.teamcode.Season17and18;

import com.qualcomm.robotcore.hardware.DcMotor;
import static com.qualcomm.robotcore.util.Range.scale;
import static java.lang.Math.abs;
public class ChassisTeleOpV2 extends ChassisTeleOp {
    public DcMotor  FrontLeft   = null;
    public DcMotor  FrontRight  = null;
    public DcMotor  RearLeft  = null;
    public DcMotor  RearRight  = null;

    public void test() {
        double Speed = -gamepad1.left_stick_y;
        double Turn = gamepad1.left_stick_x;
        double Strafe = gamepad1.right_stick_x;
        double MAX_SPEED = 1.0;

        holonomic(Speed, Turn, Strafe, MAX_SPEED);
    }

    public void holonomic(double Speed, double Turn, double Strafe, double MAX_SPEED) {

//      Left Front = +Speed + Turn - Strafe      Right Front = +Speed - Turn - Strafe
//      Left Rear  = +Speed + Turn + Strafe      Right Rear  = +Speed - Turn + Strafe

        double Magnitude = abs(Speed) + abs(Turn) + abs(Strafe);
        Magnitude = (Magnitude > 1) ? Magnitude : 1; //Set scaling to keep -1,+1 range

        if ((Speed==Turn)==(Strafe==0)){
        }
        else {
            if (Speed + Turn - Strafe == 0){
                FrontLeft.setPower (-1);
            }
            if (Speed + Turn + Strafe == 0) {
                RearLeft.setPower(-1);
            }
            if (Speed - Turn + Strafe == 0) {
                FrontRight.setPower(-1);
            }
            if (Speed - Turn - Strafe == 0) {
                RearRight.setPower(-1);
            }
        }


        FrontLeft.setPower(scale((scaleInput(Speed) + scaleInput(Turn) - scaleInput(Strafe)),
                -Magnitude, +Magnitude, -MAX_SPEED, +MAX_SPEED));
        if (RearLeft != null) {
            RearLeft.setPower(scale((scaleInput(Speed) + scaleInput(Turn) + scaleInput(Strafe)),
                    -Magnitude, +Magnitude, -MAX_SPEED, +MAX_SPEED));
        }
        FrontRight.setPower(scale((scaleInput(Speed) - scaleInput(Turn) + scaleInput(Strafe)),
                -Magnitude, +Magnitude, -MAX_SPEED, +MAX_SPEED));
        if (RearRight != null) {
            RearRight.setPower(scale((scaleInput(Speed) - scaleInput(Turn) - scaleInput(Strafe)),
                    -Magnitude, +Magnitude, -MAX_SPEED, +MAX_SPEED));
        }
    }

    private double scaleInput(double strafe) {
        return strafe;
    }
}
