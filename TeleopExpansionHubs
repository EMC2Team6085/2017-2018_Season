package org.firstinspires.ftc.teamcode.Season17and18;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;

@TeleOp(name="TeleopExpansionHubs", group="Test")
public class TeleopExpansionHubs extends OpMode {


    private static final double STRAFE_POWER = 0.7;

    HardwareMapping robot = new HardwareMapping();

    @Override
    public void init() {
       /* Initialize the hardware variables.
        * The init() method of the hardware class does all the work here
        */
        //robot.FrontRight.setTargetPosition(32);
        //robot.RearRight.setTargetPosition(32);
        //robot.FrontLeft.setTargetPosition(32);
        //robot.RearLeft.setTargetPosition(32);

        robot.init(hardwareMap);

        // Send telemetry message to signify robot waiting;
        telemetry.addData("Say", "Hello Driver");    //
    }

    @Override
    public void loop() {
        double left;
        double right;

        // Run wheels in tank mode (note: The joystick goes negative when pushed forwards, so negate it)
        left = gamepad1.left_stick_y;
        right = gamepad1.right_stick_y;


        //Strafe Right
        if (gamepad1.dpad_right){
            //Right Side
            robot.FrontRight.setPower(-STRAFE_POWER);
            robot.RearRight.setPower(STRAFE_POWER);

            //Left Side
            robot.FrontLeft.setPower(-STRAFE_POWER);
            robot.RearLeft.setPower(STRAFE_POWER);
        }
        else
        if (gamepad1.dpad_left){
            //Strafe Right

            //Right Side
            robot.FrontRight.setPower(STRAFE_POWER);
            robot.RearRight.setPower(-STRAFE_POWER);

            //Left Side
            robot.FrontLeft.setPower(STRAFE_POWER);
            robot.RearLeft.setPower(-STRAFE_POWER);
        }
        else {
            //Strafe Left

            //Left Side
            robot.FrontLeft.setPower(left);
            robot.RearLeft.setPower(left);

            //Right Side
            robot.FrontRight.setPower(-right);
            robot.RearRight.setPower(-right);
        }

        // Alex's motor power;
        //if (gamepad1.left_bumper = true) {
            //robot.GlyphLift.setTargetPosition(1);

        //}
        //else if (gamepad1.right_bumper = true) {
        //    robot.GlyphLift.setTargetPosition(-1);
        //}
        //else
            //robot.GlyphLift.setTargetPosition(0);

        if (gamepad1.a = true) {
            robot.LeftBalance.setPosition(0.5);
        }
        else if (gamepad1.b = true) {
            robot.RightBalance.setPosition(0.5);
        }


        // Send telemetry message to signify robot running;
        telemetry.addData("left", "%.2f", left);
        telemetry.addData("right", "%.2f", right);
        telemetry.addData("FR_Power", "%.2f",robot.FrontRight.getPower());
        telemetry.addData("RR_Power", "%.2f",robot.RearRight.getPower());
        telemetry.addData("FL_Power", "%.2f",robot.FrontLeft.getPower());
        telemetry.addData("RL_Power", "%.2f",robot.RearLeft.getPower());
        telemetry.addData("Front Right Encoder Position", robot.FrontRight.getCurrentPosition());
        telemetry.addData("Rear Right Encoder Position", robot.RearRight.getCurrentPosition());
        telemetry.addData("Front Left Encoder Position", robot.FrontLeft.getCurrentPosition());
        telemetry.addData("Rear Left Encoder Position", robot.RearLeft.getCurrentPosition());
        telemetry.addData("Left Balance Position", robot.LeftBalance.getPosition());
        telemetry.addData("Right Balance Position", robot.RightBalance.getPosition());
        //telemetry.addData("Glyph Lift", robot.GlyphLift.getTargetPosition());
        //telemetry.addData("Glyph Lift", robot.GlyphLift.getCurrentPosition());

    }
}
