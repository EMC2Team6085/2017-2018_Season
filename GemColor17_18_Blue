package org.firstinspires.ftc.teamcode.Season17and18;

import android.app.Activity;
import android.graphics.Color;
import android.view.View;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.HardwareMap;
//import com.qualcomm.robotcore.util.ElapsedTime;


@Autonomous(name= "GemColorBlue", group= "Test")
public class GemColor17_18_Blue extends LinearOpMode {

    private static final double servoPos1 = 0.3;

    HardwareMap hwMap;

    ColorSensor colorSensor;

    HardwareMapping robot = new HardwareMapping();

    int i = 0;

    @Override
    public void runOpMode() throws InterruptedException {
        robot.init(hwMap);
        robot.init(hardwareMap);
        robot.LeftBalance.setPosition(servoPos1);
        robot.RightBalance.setPosition(1-servoPos1);
        robot.GlyphLift.setTargetPosition(0);
        robot.gemServo.setPosition(1);

        // Send telemetry message to signify robot waiting;
        telemetry.addData("Say", "Hello Driver");

        while (i<5000) {

            float hsvValues[] = {0F, 0F, 0F};

            final float values[] = hsvValues;

            int relativeLayoutId = hardwareMap.appContext.getResources().getIdentifier("RelativeLayout", "id", hardwareMap.appContext.getPackageName());
            final View relativeLayout = ((Activity) hardwareMap.appContext).findViewById(relativeLayoutId);

            colorSensor = hardwareMap.get(ColorSensor.class, "colorSensor");


            Color.RGBToHSV(colorSensor.red() * 8, colorSensor.green() * 8, colorSensor.blue() * 8, hsvValues);
            telemetry.addData("Clear", colorSensor.alpha());
            telemetry.addData("Red  ", colorSensor.red());
            telemetry.addData("Green", colorSensor.green());
            telemetry.addData("Blue ", colorSensor.blue());
            telemetry.addData("Hue", hsvValues[0]);

            relativeLayout.post(new Runnable() {
                public void run() {
                    relativeLayout.setBackgroundColor(Color.HSVToColor(0xff, values));
                }
            });

            telemetry.update();

            sleep(10);
            i = i + 1;
            if (colorSensor.blue() >= 2){
                telemetry.addData("BLUE BLUE BLUE", colorSensor.blue());
                //move the opposite way the sensor is facing
                telemetry.update();
                i = 5000;
            }
            else if(colorSensor.red() >= 2){
                telemetry.addData("RED RED RED", colorSensor.red());
                //move the way the sensor is facing
                telemetry.update();
                i = 5000;
            }

        }

    }

}
